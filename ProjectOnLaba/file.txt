FastAPI
FastAPI — это современный веб-фреймворк для создания API на Python. Он основан на стандартных аннотациях типов Python, что позволяет автоматически генерировать документацию и валидировать данные.

Пример использования:

Copy
from fastapi import FastAPI

app = FastAPI()

@app.get("/")
async def read_root():
    return {"Hello": "World"}
Depends
Depends используется для внедрения зависимостей в FastAPI. Это позволяет передавать зависимости в обработчики маршрутов, что упрощает управление зависимостями и улучшает тестируемость кода.

Пример использования:

Copy
from fastapi import Depends, FastAPI

app = FastAPI()

async def common_parameters(q: str = None, skip: int = 0, limit: int = 10):
    return {"q": q, "skip": skip, "limit": limit}

@app.get("/items/")
async def read_items(commons: dict = Depends(common_parameters)):
    return commons
HTTPException
HTTPException используется для вызова HTTP-исключений с определёнными статусными кодами. Это позволяет возвращать пользователю понятные сообщения об ошибках.

Пример использования:

Copy
from fastapi import FastAPI, HTTPException

app = FastAPI()

@app.get("/items/{item_id}")
async def read_item(item_id: int):
    if item_id == 0:
        raise HTTPException(status_code=404, detail="Item not found")
    return {"item_id": item_id}
APIRouter
APIRouter позволяет организовывать маршруты в модулях. Это упрощает структурирование больших приложений, разделяя маршруты на логические группы.

Пример использования:

Copy
from fastapi import APIRouter, FastAPI

router = APIRouter()

@router.get("/users/")
async def read_users():
    return [{"username": "Rick"}, {"username": "Morty"}]

app = FastAPI()
app.include_router(router)
Request
Request представляет входящий HTTP-запрос. Он позволяет получать доступ к данным запроса, таким как заголовки, тело запроса и параметры.

Пример использования:

Copy
from fastapi import FastAPI, Request

app = FastAPI()

@app.get("/")
async def read_root(request: Request):
    return {"client_host": request.client.host}
status
status предоставляет HTTP-статусные коды, которые можно использовать для указания статуса ответа.

Пример использования:

Copy
from fastapi import FastAPI, status

app = FastAPI()

@app.post("/items/", status_code=status.HTTP_201_CREATED)
async def create_item(name: str):
    return {"name": name}
Form
Form используется для обработки данных форм в запросах. Это позволяет получать данные, отправленные через HTML-формы.

Пример использования:

Copy
from fastapi import FastAPI, Form

app = FastAPI()

@app.post("/login/")
async def login(username: str = Form(...), password: str = Form(...)):
    return {"username": username}
RedirectResponse
RedirectResponse используется для перенаправления клиента на другой URL. Это полезно для реализации редиректов после выполнения определённых действий.

Пример использования:

Copy
from fastapi import FastAPI
from fastapi.responses import RedirectResponse

app = FastAPI()

@app.get("/redirect")
async def redirect():
    return RedirectResponse(url="https://www.example.com")
Jinja2Templates
Jinja2Templates используется для рендеринга HTML-шаблонов с помощью Jinja2. Это позволяет создавать динамические HTML-страницы.

Пример использования:

Copy
from fastapi import FastAPI, Request
from fastapi.templating import Jinja2Templates
from fastapi.responses import HTMLResponse

app = FastAPI()
templates = Jinja2Templates(directory="templates")

@app.get("/items/{id}", response_class=HTMLResponse)
async def read_item(request: Request, id: str):
    return templates.TemplateResponse("item.html", {"request": request, "id": id})



#без формы с html
# @app.post("/register", status_code=status.HTTP_201_CREATED)
# async def register(user: UserCreate, db: AsyncSession = Depends(get_session)):
#     if user.password != user.password_confirm:
#         raise HTTPException(status_code=400, detail="Passwords do not match")
#     db_user = await create_user(db, user)
#     return {"detail": "User registered successfully", "user": db_user}

#без формы с html
# @app.post("/login")
# async def login(form_data: OAuth2PasswordRequestForm = Depends(), db: AsyncSession = Depends(get_session)):
#     user = await authenticate_user(db, form_data.username, form_data.password)
#     if not user:
#         raise HTTPException(
#             status_code=status.HTTP_401_UNAUTHORIZED,
#             detail="Incorrect email or password",
#             headers={"WWW-Authenticate": "Bearer"},
#         )
#     access_token = create_access_token(data={"sub": user.email})
#     return {"access_token": access_token, "token_type": "bearer"}

# @app.get("/tasks_of_user/{login}")
# async def read_tasks(login: str, db: AsyncSession = Depends(get_session)):
#     tasks = await get_user_tasks(db, login)
#     return tasks

# @router.get('/tasks')
# async def read_tasks_html(request: Request, tasks=Depends(read_tasks)):
#     return templates.TemplateResponse(name='task_up.html', context={'request': request, 'tasks': tasks})

# @app.get("/tasks")
# async def read_tasks(status: str = None, db: AsyncSession = Depends(get_session)):
#     tasks = await get_tasks(db, status)
#     return tasks
#
# @app.get("/tasks/{task_id}")
# async def read_task(task_id: int, db: AsyncSession = Depends(get_session)):
#     db_task = await get_task(db, task_id)
#     if db_task is None:
#         raise HTTPException(status_code=404, detail="Task not found")
#     return db_task
#
# @app.post("/tasks/create")
# async def create_new_task(user_id: int, task: TaskCreate, db: AsyncSession = Depends(get_session)):
#     db_task = await create_task(db, task, user_id)
#     return db_task
#
# @app.put("/tasks/{task_id}")
# async def update_existing_task(task_id: int, task: TaskCreate, db: AsyncSession = Depends(get_session)):
#     db_task = await update_task(db, task_id, task)
#     if db_task is None:
#         raise HTTPException(status_code=404, detail="Task not found")
#     return templates.TemplateResponse(
#         "task_up.html",
#         {"task_up": db_task}
#     )
#
# @app.delete("/tasks/{task_id}")
# async def delete_existing_task(task_id: int, db: AsyncSession = Depends(get_session)):
#     db_task = await delete_task(db, task_id)
#     if db_task is None:
#         raise HTTPException(status_code=404, detail="Task not found")
#     return {"detail": "Task deleted"}


Давайте подробно рассмотрим каждую из упомянутых библиотек и их примеры использования в контексте FastAPI и SQLAlchemy.

### SQLAlchemy

**SQLAlchemy** — это библиотека для работы с базами данных в Python. Она предоставляет ORM (Object-Relational Mapping), который позволяет взаимодействовать с базой данных, используя объекты Python.

#### AsyncSession

**AsyncSession** предоставляет асинхронную сессию для взаимодействия с базой данных. Это позволяет выполнять запросы к базе данных асинхронно, что полезно для повышения производительности приложений.

**Пример использования:**

```python
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.orm import sessionmaker

DATABASE_URL = "postgresql+asyncpg://user:password@localhost/dbname"

engine = create_async_engine(DATABASE_URL, echo=True)
async_session = sessionmaker(
    engine, expire_on_commit=False, class_=AsyncSession
)

async def get_session() -> AsyncSession:
    async with async_session() as session:
        yield session
```

#### create_async_engine

**create_async_engine** создаёт асинхронный движок для соединений с базой данных. Это необходимо для работы с асинхронными сессиями.

**Пример использования:**

```python
from sqlalchemy.ext.asyncio import create_async_engine

DATABASE_URL = "postgresql+asyncpg://user:password@localhost/dbname"

engine = create_async_engine(DATABASE_URL, echo=True)
```

#### declarative_base

**declarative_base** — это базовый класс для декларативных определений классов в SQLAlchemy. Он используется для создания моделей, которые соответствуют таблицам в базе данных.

**Пример использования:**

```python
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, index=True)
```

#### Column, Integer, String, ForeignKey, Date

Эти классы используются для определения колонок и их типов в моделях SQLAlchemy.

**Пример использования:**

```python
from sqlalchemy import Column, Integer, String, ForeignKey, Date

class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, index=True)
    email = Column(String, unique=True, index=True)
    created_at = Column(Date)
```

#### relationship

**relationship** определяет отношения между таблицами в моделях SQLAlchemy. Это позволяет легко работать с связанными данными.

**Пример использования:**

```python
from sqlalchemy.orm import relationship

class Order(Base):
    __tablename__ = 'orders'
    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey('users.id'))
    user = relationship("User", back_populates="orders")

User.orders = relationship("Order", order_by=Order.id, back_populates="user")
```

#### select

**select** используется для создания SQL-запросов SELECT. Это позволяет выполнять запросы к базе данных для получения данных.

**Пример использования:**

```python
from sqlalchemy.future import select

async def get_user(session, user_id):
    result = await session.execute(select(User).filter_by(id=user_id))
    return result.scalar_one_or_none()
```

### JWT (JSON Web Tokens)

**JWT** используется для кодирования и декодирования JSON Web Tokens, которые часто применяются для аутентификации и авторизации.

**Пример использования:**

```python
from jose import jwt

SECRET_KEY = "your-secret-key"
ALGORITHM = "HS256"

def create_access_token(data: dict):
    to_encode = data.copy()
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt
```

### Datetime и Timezone

**datetime, timedelta, timezone, date** используются для работы с датами и временем. Они позволяют управлять временными метками и выполнять операции с датами.

**Пример использования:**

```python
from datetime import datetime, timedelta, timezone

now = datetime.now(timezone.utc)
future = now + timedelta(days=1)
```

### Passlib

**Passlib** используется для хеширования и проверки паролей. Это важно для безопасного хранения паролей пользователей.

**Пример использования:**

```python
from passlib.context import CryptContext

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def get_password_hash(password):
    return pwd_context.hash(password)

def verify_password(plain_password, hashed_password):
    return pwd_context.verify(plain_password, hashed_password)
```

### Contextlib

**Contextlib** предоставляет утилиты для работы с менеджерами контекста. **asynccontextmanager** используется для создания асинхронных менеджеров контекста.

**Пример использования:**

```python
from contextlib import asynccontextmanager

@asynccontextmanager
async def managed_resource(resource):
    try:
        yield resource
    finally:
        await resource.cleanup()
```

### Pydantic

**Pydantic** используется для валидации данных и управления настройками с использованием аннотаций типов Python.

#### BaseModel

**BaseModel** — это базовый класс для создания моделей данных.

**Пример использования:**

```python
from pydantic import BaseModel

class Item(BaseModel):
    name: str
    price: float
    description: str = None
```

#### Field

**Field** используется для предоставления дополнительной конфигурации полей модели Pydantic.

**Пример использования:**

```python
from pydantic import BaseModel, Field

class Item(BaseModel):
    name: str = Field(..., example="Item name")
    price: float = Field(..., gt=0, description="The price must be greater than zero")
```

#### EmailStr

**EmailStr** — это тип Pydantic для валидации адресов электронной почты.

**Пример использования:**

```python
from pydantic import BaseModel, EmailStr

class User(BaseModel):
    email: EmailStr
```

### Enum

**Enum** используется для определения перечислений, которые представляют собой набор символических имён, связанных с уникальными, постоянными значениями.

**Пример использования:**

```python
from enum import Enum

class UserRole(str, Enum):
    admin = "admin"
    user = "user"
    guest = "guest"
```

### Dotenv

**Dotenv** используется для загрузки переменных окружения из файла `.env` в окружение.

**Пример использования:**

```python
from dotenv import load_dotenv
import os

load_dotenv()

SECRET_KEY = os.getenv("SECRET_KEY")
```

### Pydantic Settings

**Pydantic Settings** используется для управления настройками приложения с использованием Pydantic.

**Пример использования:**

```python
from pydantic import BaseSettings

class Settings(BaseSettings):
    app_name: str = "Awesome API"
    admin_email: str

    class Config:
        env_file = ".env"

settings = Settings()
```

### OS

**OS** предоставляет способ использования функциональности, зависящей от операционной системы, такой как чтение или запись в файловую систему.

**Пример использования:**

```python
import os

file_path = os.path.join("data", "file.txt")
with open(file_path, "w") as file:
    file.write("Hello, World!")
```

### Uvicorn

**Uvicorn** — это ASGI-сервер, используемый для обслуживания приложений FastAPI. Он поддерживает асинхронные запросы и обеспечивает высокую производительность.

**Пример использования:**

```python
import uvicorn

if __name__ == "__main__":
    uvicorn.run("main:app", host="0.0.0.0", port=8000, reload=True)
```

Эти библиотеки и компоненты помогают разработчикам создавать мощные и гибкие веб-приложения с использованием FastAPI и SQLAlchemy.